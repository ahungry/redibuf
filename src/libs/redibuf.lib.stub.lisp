;; redibuf - A project template generated by ahungry-fleece
;; Copyright (C) 2016 Your Name <redibuf@example.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; redibuf.lib.stub.lisp

(in-package #:cl-user)

(defpackage redibuf.lib.stub
  (:use
   :cl
   :redis

   ;; cl-protobufs
   :protobufs
   )
  (:export
   :echo))

(in-package #:redibuf.lib.stub)

;; Obj should be a blub-message
(defun store-obj-on-redis (obj)
  (with-connection (:host "localhost" :port 6379)
    (red:set
     "protobuf"
     (flexi-streams:octets-to-string    ; string-to-octets to reverse
      (proto:serialize-object-to-bytes obj 'blub-message)))))

(defun ping ()
  (with-connection (:host "localhost" :port 6379)
    (red:set "ding" "dong")
    (print (red:get "food"))
    (print (red:get "ding"))
    (red:ping)))

(defvar *blub*)

(defun schema-time ()
  (proto:define-schema blub
      (:package blub_test)
    (proto:define-message blub-message ()
      (blub-field :type string)))
  )
;; (proto:find-message (proto:find-schema 'blub) 'blub-message)
;; (make-instance 'blub-message :blub-field "DOG")
;; Validation occurs during serialize
;; (proto:serialize-object-to-bytes (make-instance 'blub-message :blub-field "DOG") 'blub-message)
;; (slot-value obj 'blub-field)
;; (with-slots (blub-field) obj (setf blub-field 4))
;; (describe (deserialize-object 'blub-message (proto:serialize-object-to-bytes obj 'blub-message)))

;; (proto:write-schema (pb) :type :lisp)
(defun pb ()
  (protobufs:parse-schema-from-file
   "~/src/lisp/redibuf/person.proto"
   :name 'person
   :class 'person-class
   :conc-name nil))
;; (proto:find-message (pb) 'tutoriaL::person)

(defvar spec (make-array '(0) :element-type 'base-char
                         :fill-pointer 0 :adjustable t))
(defun eval-pb ()
  (with-output-to-string (s spec)
    (proto:write-schema (pb) :type :lisp :stream s))
  )

(defun loop-over-pb (spec)
  "Read/evaluate all the things in a string."
  (loop for (s-exp pos) = (multiple-value-list (read-from-string spec nil 'eof :start (or pos 0)))
     until (eq s-exp 'eof)
     do (progn
          (print pos)
          (eval s-exp))))

(defun boot ()
  "Load all the things."
  (eval-pb)
  (loop-over-pb spec)
  (cl:in-package :redibuf.lib.stub))

(defun echo (input)
  input)

;;; "redibuf.lib.stub" goes here. Hacks and glory await!
