;; redibuf - A project template generated by ahungry-fleece
;; Copyright (C) 2016 Your Name <redibuf@example.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; redibuf.lisp

(in-package #:cl-user)

(defpackage redibuf
  (:use :cl)
  (:export :main
           :server
           :server-restart
           :print-usage))

(in-package #:redibuf)

(defun print-usage ()
  (format t
          "redibuf v/~a.

Usage:

    $ redibuf [-h, --help] # Print this help

"
          (asdf:component-version (asdf:find-system :redibuf))))

(defun main (&rest argv)
  (unless argv
    (setf argv (cdr sb-ext:*posix-argv*)))

  (if (or (equal (first argv) "-h")
          (equal (first argv) "--help"))
      (print-usage)

      (cond
        (t (print-usage)))))

(defvar server-log '())

(defun server-response (env)
  "Get the response."
  (let ((number (nth-value 0 (parse-integer (subseq (getf env :path-info) 1)))))
    ;; (format nil "~a" (redibuf.lib.math:generate-math-object number))
    (redibuf.lib.math:math-to-json
     (redibuf.lib.math:generate-math-object number))
    ))

(defun server-restart ()
  (bt:destroy-thread
   (find "clack-handler-woo" (bt:all-threads)
         :key #'bt:thread-name :test #'string=))
  (server))

(defun server ()
  (clack:clackup
   (lambda (env)
     (let ((response (server-response env)))
       ;; (declare (ignore env))
       (push response server-log)
       (push (length response) server-log)
       ;; (push env server-log)
       `(200
         (
          :content-length ,(length response)
          :content-type "application/json"
          )
         (,response))))
   :port 5001
   :server :woo
   :use-default-middlewares nil))

;;; "redibuf" goes here. Hacks and glory await!
